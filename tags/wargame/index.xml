<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wargame on Sciver&#39;s Blog</title>
    <link>https://nut-guo.github.io/tags/wargame/</link>
    <description>Recent content in Wargame on Sciver&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Jun 2019 09:02:09 +0800</lastBuildDate>
    
	<atom:link href="https://nut-guo.github.io/tags/wargame/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IOLI整理</title>
      <link>https://nut-guo.github.io/posts/ioli%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 07 Jun 2019 09:02:09 +0800</pubDate>
      
      <guid>https://nut-guo.github.io/posts/ioli%E6%95%B4%E7%90%86/</guid>
      <description>IOLI crackme crackme0x05 分析sym.check这个函数 / (fcn) sym.check 120 | sym.check (char *s); | ; var char *var_dh @ ebp-0xd | ; var uint32_t var_ch @ ebp-0xc | ; var uint32_t var_8h @ ebp-0x8 | ; var int32_t var_4h @ ebp-0x4 | ; arg char *s @ ebp+0x8 | ; var char *format @ esp+0x4 | ;</description>
    </item>
    
    <item>
      <title>Exploit Education整理</title>
      <link>https://nut-guo.github.io/posts/exploit-education%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 06 Jun 2019 18:46:23 +0800</pubDate>
      
      <guid>https://nut-guo.github.io/posts/exploit-education%E6%95%B4%E7%90%86/</guid>
      <description>Exploit Education整理 Phoenix stack-four 不同于之前几道题目静态分析的方法，此题涉及到多个函数之间的跳转，单纯的静态分析不太方便，利用pattern动态调</description>
    </item>
    
    <item>
      <title>Pwnable.kr</title>
      <link>https://nut-guo.github.io/posts/pwnable.kr/</link>
      <pubDate>Thu, 30 May 2019 19:40:56 +0800</pubDate>
      
      <guid>https://nut-guo.github.io/posts/pwnable.kr/</guid>
      <description>Pwnable.kr Notes flag 运行程序得到如下输出： I will malloc() and strcpy the flag there. take it. 根据提示信息，flag会被存放载程序中并且通过strcpy进行处理，按理说应该刻意直接通过s</description>
    </item>
    
  </channel>
</rss>